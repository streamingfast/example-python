syntax = "proto3";

package sf.substreams.v1;
option go_package = "github.com/streamingfast/substreams/pb/sf/substreams/v1;pbsubstreams";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "sf/substreams/v1/manifest.proto";
import "sf/substreams/v1/clock.proto";

service Stream {
  rpc Blocks(Request) returns (stream Response);
}

message Request {
  int64 start_block_num = 1;
  string start_cursor = 2;
  uint64 stop_block_num = 3;
  repeated ForkStep fork_steps = 4;
  string irreversibility_condition = 5;

  Manifest manifest = 6;
  repeated string output_modules = 7;
  repeated string initial_store_snapshot_for_modules = 8;
}

message Response {
  oneof message {
    ModulesProgress progress = 1; // Progress of data preparation, before sending in the stream of `data` events.
    InitialSnapshotData snapshot_data = 2;
    InitialSnapshotComplete snapshot_complete = 3;
    BlockScopedData data = 4;
  }
}

enum ForkStep {
  STEP_UNKNOWN = 0;
  // Block is new head block of the chain, that is linear with the previous block
  STEP_NEW = 1;
  // Block is now forked and should be undone, it's not the head block of the chain anymore
  STEP_UNDO = 2;
  // Removed, was STEP_REDO
  reserved 3;
  // Block is now irreversible and can be committed to (finality is chain specific, see chain documentation for more details)
  STEP_IRREVERSIBLE = 4;
  // Removed, was STEP_STALLED
  reserved 5;
}

message InitialSnapshotComplete {
  string cursor = 1;
}

message InitialSnapshotData {
  string module_name = 1;
  StoreDeltas deltas = 2;
  uint64 sent_keys = 4;
  uint64 total_keys = 3;
}

message BlockScopedData {
  repeated ModuleOutput outputs = 1;
  Clock clock = 3;
  ForkStep step = 6;
  string cursor = 10;
}

message ModuleOutput {
  string name = 1;
  oneof data {
    google.protobuf.Any map_output = 2;
    StoreDeltas store_deltas = 3;
  }
  repeated string logs = 4;
}

message ModulesProgress {
  repeated ModuleProgress modules = 1;
}

message ModuleProgress {
  string name = 1;
  repeated BlockRange processed_ranges = 2;

  uint64 total_bytes_read = 3;
  uint64 total_bytes_written = 4;

  bool failed = 7;
  string failure_reason = 8;
}

message BlockRange {
  uint64 start_block = 1;
  uint64 end_block = 2;
}

message StoreDeltas {
  repeated StoreDelta deltas = 1;
}

message StoreDelta {
  enum Operation {
    UNSET = 0;
    CREATE = 1;
    UPDATE = 2;
    DELETE = 3;
  }
  Operation operation = 1;
  uint64 ordinal = 2;
  string key = 3;
  bytes old_value = 4;
  bytes new_value = 5;
}

//table.1
// create f.1 o.10 n.99
// update f.1 o.99 n.200
// update f.2 o.abc n.xyz
// update f.1 o.200 n.400

//table.1
// create f.1 o.10 n.400 f.2 o.abc n.xyz


//table.1
// update f.1 o.10 n.99
// update f.1 o.99 n.200
// update f.2 o.abc n.xyz
// update f.1 o.200 n.400

//table.1
// update f.1 o.10 n.400 f.2 o.abc n.xyz

message Output {
  uint64 block_num = 1;
  string block_id = 2;
  google.protobuf.Timestamp timestamp = 4;
  google.protobuf.Any value = 10;
}
